/* 
 * Class GameOfWar
 * Author: Pearce Haviland
 * 
 * Description:
 * This is an implementation of the card game War.
 * ASCII art for banner image generated by https://www.ascii-art-generator.org/
 */
using System;
using System.Collections.Generic;
using System.Text;

// Each player gets dealt half the deck, 26 cards, and the cards are put face down
// in a stack in front of the players.
//
// Both players turn their top card face up at the same time. The person with the
// higher card wins that draw, and takes both the cards. They are put to the side
// to form a new stack, which the player can use when he finishes his current stack.
//
// If both players draw a card of the same rank, e.g. they both draw 8s, then there's
// a war. The face up cards are left on the table and each player puts three cards face
// down on the table, and then puts one card face up. The face up card determines who
// wins the war and gets all 10 cards that are on the table at this point. If the face
// up card is again the same rank, then the war goes on, three more face down, one face up etc.
//
// First player to finish all their cards loses the game.
//
// If a player finishes their cards during a war without having enough cards to finish the
// war then they lose immediately.

namespace GameOfWar
{
    class GameOfWar
    {
        // Used to simplify input handling
        private enum GamePhase
        {
            MainMenu,       // Intro screen, where player decides what to do
            RegularLoop,    // Regular gameplay, involving drawing cards
            War,            // "War" scenario, where players must pick from 3 drawn cards
            ContinueScreen  // Player decides between "Play again" and "Exit"
        }

        public GameOfWar()
        {
            m_deck1 = new Deck();
            m_phase = GamePhase.MainMenu;
        }
        
        // validateInput
        //
        // Given user input, performs necessary input validation based on
        // the current game phase.
        // param input - string containing user input
        // return - true if input is valid, false if not
        private bool validateInput(string input)
        {
            bool valid = false;

            // Exit case should be handled at any phase, and quickly
            if (input == "exit")
            {
                m_exit = true;
                return true;
            }

            switch (m_phase)
            {
                case GamePhase.MainMenu:
                    break;
                case GamePhase.RegularLoop:
                    break;
                case GamePhase.War:
                    break;
                case GamePhase.ContinueScreen:
                    break;
                default:
                    break;
            }

            return valid;
        }

        // handleValidInput
        //
        // Given the validated user input, performs the necessary
        // game operations.
        private void handleValidInput(string input)
        {
            if (input == "exit")
            {
                return;
            }

            switch (m_phase)
            {
                case GamePhase.MainMenu:
                    break;
                case GamePhase.RegularLoop:
                    break;
                case GamePhase.War:
                    break;
                case GamePhase.ContinueScreen:
                    break;
                default:
                    break;
            }
        }

        // handleBadInput()
        //
        // Based on game phase, outputs the appropriate error
        // message.
        private void handleBadInput()
        {
            switch (m_phase)
            {
                case GamePhase.MainMenu:
                    break;
                case GamePhase.RegularLoop:
                    break;
                case GamePhase.War:
                    break;
                case GamePhase.ContinueScreen:
                    break;
                default:
                    break;
            }
        }

        private void outputCurrentPhase()
        {
            switch (m_phase)
            {
                case GamePhase.MainMenu:
                    Console.WriteLine(m_mainMenuText);
                    break;
                case GamePhase.RegularLoop:
                    break;
                case GamePhase.War:
                    break;
                case GamePhase.ContinueScreen:
                    break;
                default:
                    break;
            }
        }

        // RunGame
        //
        // Performs the main gameplay loop
        public void RunGame()
        {
            string userInput = "";

            m_deck1.Shuffle();
            m_deck2 = m_deck1.Split();

            // Keep looping until the user decides to leave
            while (m_exit == false)
            {
                outputCurrentPhase();

                userInput = Console.ReadLine();
                
                if (validateInput(userInput) == true)
                {
                    handleValidInput(userInput);
                }

                else  // validateInput(userInput) == false
                {
                    handleBadInput();
                }
            }

            Console.WriteLine("Thanks for playing!");
        }

        // Decks for each player
        private Deck m_deck1, m_deck2;

        // The current phase of the game
        private GamePhase m_phase;

        // Indicates if the user would like to quit the game
        private bool m_exit;    

        private const string m_mainMenuText = @"
========================
#     #    #    ######  
#  #  #   # #   #     # 
#  #  #  #   #  #     # 
#  #  # #     # ######  
#  #  # ####### #   #
#  #  # #     # #    #  
 ## ##  #     # #     #
========================

Welcome to War!
Written by Pearce Haviland

Write 'exit' to quit the game at any time.

Enter the number corresponding to your preferred option:
1: Start Game
2: Read Rules";
        
    }
}
